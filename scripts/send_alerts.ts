
#!/usr/bin/env tsx
import { PrismaClient } from "@prisma/client";
const prisma=new PrismaClient(); const SENDGRID_API_KEY=process.env.SENDGRID_API_KEY||""; const FROM_EMAIL=process.env.FROM_EMAIL||"alerts@news-edges.local";
async function sendEmail(to:string,subject:string,html:string){ if(!SENDGRID_API_KEY){ console.log("[DRY RUN] Would send to",to,subject); return; } const res=await fetch("https://api.sendgrid.com/v3/mail/send",{method:"POST",headers:{"authorization":`Bearer ${SENDGRID_API_KEY}`,"content-type":"application/json"},body:JSON.stringify({personalizations:[{to:[{email:to}]}],from:{email:FROM_EMAIL},subject,content:[{type:"text/html",value:html}]})}); if(!res.ok){ const txt=await res.text(); console.error("SendGrid error",res.status,txt); } }
function esc(s:string){ return s.replace(/[&<>]/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;'} as any)[c]); }
async function main(){ const since=new Date(Date.now()-24*60*60*1000); const subs=await prisma.subscription.findMany({include:{watchlist:true}}); if(subs.length===0){ console.log("No subscribers yet."); return; } for(const sub of subs){ let signals; if(sub.watchlistId){ const wl=await prisma.watchlistEntity.findMany({where:{watchlistId:sub.watchlistId},include:{entity:true}}); const ids=wl.map(w=>w.entityId); signals=await prisma.signal.findMany({where:{score:{gte:sub.minScore},createdAt:{gte:since},article:{entities:{some:{entityId:{in:ids}}}}},include:{article:{include:{entities:{include:{entity:true}}}}},orderBy:[{score:"desc"},{createdAt:"desc"}],take:20}); } else { signals=await prisma.signal.findMany({where:{score:{gte:sub.minScore},createdAt:{gte:since}},include:{article:{include:{entities:{include:{entity:true}}}}},orderBy:[{score:"desc"},{createdAt:"desc"}],take:20}); } if(signals.length===0) continue; const items=signals.map(s=>{ const ents=s.article.entities.map(ae=>ae.entity.name).join(", "); return `<li><b>${esc(s.article.title)}</b> — score ${Math.round(s.score)}<br/><small>${esc(ents)}</small><br/><a href="${s.article.url}">${s.article.url}</a><br/><em>${esc(s.rationale)}</em></li>`; }).join("\n"); await sendEmail(sub.email,"Daily Signals – News Edges",`<h3>Top signals (last 24h)</h3><ul>${items}</ul>`); console.log("Sent to",sub.email,signals.length,"signals"); } }
main().finally(async()=>prisma.$disconnect());
